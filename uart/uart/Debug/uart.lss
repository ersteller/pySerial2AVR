
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000c24  00000cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00800084  00800084  00000cdc  2**0
                  ALLOC
  3 .stab         00000a50  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001dc  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001908  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010cd  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000412  00000000  00000000  00002b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a79  00000000  00000000  00002f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000731  00000000  00000000  00003f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 80 00 	jmp	0x100	; 0x100 <__ctors_end>
   4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
   8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
   c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  14:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  18:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  20:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  28:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  2c:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_11>
  30:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_12>
  34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  3c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>

00000054 <__c.1697>:
  54:	20 69 6e 73 74 72 75 63 74 69 6f 6e 20 74 6f 6f      instruction too
  64:	20 6c 6f 6e 67 20 2d 3e 20 63 6c 65 61 72 65 64      long -> cleared
  74:	0a 00                                               ..

00000076 <__c.1699>:
  76:	20 69 6e 73 74 72 75 63 74 69 6f 6e 20 74 6f 6f      instruction too
  86:	20 73 68 6f 72 74 20 2d 3e 20 63 6c 65 61 72 65      short -> cleare
  96:	64 0a 00                                            d..

00000099 <__c.1710>:
  99:	75 6e 73 75 70 70 6f 72 74 65 64 20 69 6e 73 74     unsupported inst
  a9:	72 75 63 74 69 6f 6e 3a 20 00                       ruction: .

000000b3 <__c.1712>:
  b3:	20 2d 3e 20 63 6c 65 61 72 65 64 00                  -> cleared.

000000bf <__c.1569>:
  bf:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  cf:	3a 20 00                                            : .

000000d2 <__c.1571>:
  d2:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  e2:	6f 72 3a 20 00                                      or: .

000000e7 <__c.1573>:
  e7:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  f7:	65 72 72 6f 72 3a 20 00 00                          error: ..

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf e5       	ldi	r28, 0x5F	; 95
 106:	d4 e0       	ldi	r29, 0x04	; 4
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	a0 e6       	ldi	r26, 0x60	; 96
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e4 e2       	ldi	r30, 0x24	; 36
 114:	fc e0       	ldi	r31, 0x0C	; 12
 116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x10>
 118:	05 90       	lpm	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	a4 38       	cpi	r26, 0x84	; 132
 11e:	b1 07       	cpc	r27, r17
 120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0xc>

00000122 <__do_clear_bss>:
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	a4 e8       	ldi	r26, 0x84	; 132
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
 12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
 12c:	ad 3e       	cpi	r26, 0xED	; 237
 12e:	b1 07       	cpc	r27, r17
 130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
 132:	0e 94 ba 03 	call	0x774	; 0x774 <main>
 136:	0c 94 10 06 	jmp	0xc20	; 0xc20 <_exit>

0000013a <__bad_interrupt>:
 13a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013e <instructionHandler>:
 call appropriate function
 
 frame looks like "i 0x12Ab 0xFf\n"
 */
uint8_t instructionHandler(uint8_t c)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	67 97       	sbiw	r28, 0x17	; 23
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	8f 8b       	std	Y+23, r24	; 0x17
	instruction[instrIn] =  c;
 154:	80 91 84 00 	lds	r24, 0x0084
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8a 57       	subi	r24, 0x7A	; 122
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	2f 89       	ldd	r18, Y+23	; 0x17
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
	instrIn++;
 166:	80 91 84 00 	lds	r24, 0x0084
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 84 00 	sts	0x0084, r24
	
	// backspace
	if ( c == 8 || c == 0x7f )
 170:	8f 89       	ldd	r24, Y+23	; 0x17
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	19 f0       	breq	.+6      	; 0x17c <instructionHandler+0x3e>
 176:	8f 89       	ldd	r24, Y+23	; 0x17
 178:	8f 37       	cpi	r24, 0x7F	; 127
 17a:	f1 f4       	brne	.+60     	; 0x1b8 <instructionHandler+0x7a>
	{
		// clear backspace from buffer
		instrIn--;
 17c:	80 91 84 00 	lds	r24, 0x0084
 180:	81 50       	subi	r24, 0x01	; 1
 182:	80 93 84 00 	sts	0x0084, r24
		instruction[instrIn] = 0;
 186:	80 91 84 00 	lds	r24, 0x0084
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	8a 57       	subi	r24, 0x7A	; 122
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	fc 01       	movw	r30, r24
 194:	10 82       	st	Z, r1
		if (instrIn) 
 196:	80 91 84 00 	lds	r24, 0x0084
 19a:	88 23       	and	r24, r24
 19c:	69 f0       	breq	.+26     	; 0x1b8 <instructionHandler+0x7a>
		{
			//clear last char from buffer if there is one
			instrIn--;
 19e:	80 91 84 00 	lds	r24, 0x0084
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	80 93 84 00 	sts	0x0084, r24
			instruction[instrIn] = 0;
 1a8:	80 91 84 00 	lds	r24, 0x0084
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8a 57       	subi	r24, 0x7A	; 122
 1b2:	9f 4f       	sbci	r25, 0xFF	; 255
 1b4:	fc 01       	movw	r30, r24
 1b6:	10 82       	st	Z, r1
		}
	}		
	
	if (instrIn >= INSTRUCTION_LEN)
 1b8:	80 91 84 00 	lds	r24, 0x0084
 1bc:	80 32       	cpi	r24, 0x20	; 32
 1be:	70 f0       	brcs	.+28     	; 0x1dc <instructionHandler+0x9e>
	{
		// Todo: should throw error because clearing buffer for new instructiosn
		instrIn = 0;
 1c0:	10 92 84 00 	sts	0x0084, r1
		uart_puts_P(" instruction too long -> cleared\n");
 1c4:	84 e5       	ldi	r24, 0x54	; 84
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_puts_p>
		memset(instruction, 0, INSTRUCTION_LEN);
 1cc:	20 e2       	ldi	r18, 0x20	; 32
 1ce:	86 e8       	ldi	r24, 0x86	; 134
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	32 2f       	mov	r19, r18
 1d6:	11 92       	st	Z+, r1
 1d8:	3a 95       	dec	r19
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <instructionHandler+0x98>
	}		
		
	if ((c == '\r') && (instrIn < 3))
 1dc:	8f 89       	ldd	r24, Y+23	; 0x17
 1de:	8d 30       	cpi	r24, 0x0D	; 13
 1e0:	91 f4       	brne	.+36     	; 0x206 <instructionHandler+0xc8>
 1e2:	80 91 84 00 	lds	r24, 0x0084
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	70 f4       	brcc	.+28     	; 0x206 <instructionHandler+0xc8>
	{
		// Todo: should throw error because clearing buffer for new instructions
		instrIn = 0;
 1ea:	10 92 84 00 	sts	0x0084, r1
		uart_puts_P(" instruction too short -> cleared\n");
 1ee:	86 e7       	ldi	r24, 0x76	; 118
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_puts_p>
		memset(instruction, 0, INSTRUCTION_LEN);
 1f6:	20 e2       	ldi	r18, 0x20	; 32
 1f8:	86 e8       	ldi	r24, 0x86	; 134
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	32 2f       	mov	r19, r18
 200:	11 92       	st	Z+, r1
 202:	3a 95       	dec	r19
 204:	e9 f7       	brne	.-6      	; 0x200 <instructionHandler+0xc2>
	}
			
	if ((c == '\r') && (instrIn >= 3))
 206:	8f 89       	ldd	r24, Y+23	; 0x17
 208:	8d 30       	cpi	r24, 0x0D	; 13
 20a:	09 f0       	breq	.+2      	; 0x20e <instructionHandler+0xd0>
 20c:	bb c0       	rjmp	.+374    	; 0x384 <instructionHandler+0x246>
 20e:	80 91 84 00 	lds	r24, 0x0084
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	08 f4       	brcc	.+2      	; 0x218 <instructionHandler+0xda>
 216:	b6 c0       	rjmp	.+364    	; 0x384 <instructionHandler+0x246>
	{
		// call instruction now
		char* pParamEnd = NULL;
 218:	1e 82       	std	Y+6, r1	; 0x06
 21a:	1d 82       	std	Y+5, r1	; 0x05
		uint16_t addr = 0;
 21c:	1a 82       	std	Y+2, r1	; 0x02
 21e:	19 82       	std	Y+1, r1	; 0x01
		uint8_t val = 0;
 220:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t ret = 0;		
 222:	1c 82       	std	Y+4, r1	; 0x04
		char buff[16];
		
		switch(instruction[0])
 224:	80 91 86 00 	lds	r24, 0x0086
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	87 36       	cpi	r24, 0x67	; 103
 22e:	91 05       	cpc	r25, r1
 230:	09 f4       	brne	.+2      	; 0x234 <instructionHandler+0xf6>
 232:	55 c0       	rjmp	.+170    	; 0x2de <instructionHandler+0x1a0>
 234:	83 37       	cpi	r24, 0x73	; 115
 236:	91 05       	cpc	r25, r1
 238:	09 f0       	breq	.+2      	; 0x23c <instructionHandler+0xfe>
 23a:	89 c0       	rjmp	.+274    	; 0x34e <instructionHandler+0x210>
		{
			case 's':
				addr = (uint16_t) strtoul(&instruction[1], &pParamEnd, 16);
 23c:	87 e8       	ldi	r24, 0x87	; 135
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	9e 01       	movw	r18, r28
 242:	2b 5f       	subi	r18, 0xFB	; 251
 244:	3f 4f       	sbci	r19, 0xFF	; 255
 246:	b9 01       	movw	r22, r18
 248:	40 e1       	ldi	r20, 0x10	; 16
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	0e 94 3e 04 	call	0x87c	; 0x87c <strtoul>
 250:	dc 01       	movw	r26, r24
 252:	cb 01       	movw	r24, r22
 254:	9a 83       	std	Y+2, r25	; 0x02
 256:	89 83       	std	Y+1, r24	; 0x01
				val = (uint8_t)  strtoul(++pParamEnd, NULL, 16);
 258:	8d 81       	ldd	r24, Y+5	; 0x05
 25a:	9e 81       	ldd	r25, Y+6	; 0x06
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	9e 83       	std	Y+6, r25	; 0x06
 260:	8d 83       	std	Y+5, r24	; 0x05
 262:	8d 81       	ldd	r24, Y+5	; 0x05
 264:	9e 81       	ldd	r25, Y+6	; 0x06
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	40 e1       	ldi	r20, 0x10	; 16
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	0e 94 3e 04 	call	0x87c	; 0x87c <strtoul>
 272:	dc 01       	movw	r26, r24
 274:	cb 01       	movw	r24, r22
 276:	8b 83       	std	Y+3, r24	; 0x03
				ret = setValAddr(addr, val);
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 81       	ldd	r25, Y+2	; 0x02
 27c:	6b 81       	ldd	r22, Y+3	; 0x03
 27e:	0e 94 cf 01 	call	0x39e	; 0x39e <setValAddr>
 282:	8c 83       	std	Y+4, r24	; 0x04
				if (ret != 0)
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	88 23       	and	r24, r24
 288:	09 f4       	brne	.+2      	; 0x28c <instructionHandler+0x14e>
 28a:	6e c0       	rjmp	.+220    	; 0x368 <instructionHandler+0x22a>
				{
					memset(buff, 0, 16);
 28c:	ce 01       	movw	r24, r28
 28e:	07 96       	adiw	r24, 0x07	; 7
 290:	20 e1       	ldi	r18, 0x10	; 16
 292:	fc 01       	movw	r30, r24
 294:	32 2f       	mov	r19, r18
 296:	11 92       	st	Z+, r1
 298:	3a 95       	dec	r19
 29a:	e9 f7       	brne	.-6      	; 0x296 <instructionHandler+0x158>
					memcpy(buff, " --> 0x",7);
 29c:	ce 01       	movw	r24, r28
 29e:	07 96       	adiw	r24, 0x07	; 7
 2a0:	20 e6       	ldi	r18, 0x60	; 96
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	47 e0       	ldi	r20, 0x07	; 7
 2a6:	f9 01       	movw	r30, r18
 2a8:	00 80       	ld	r0, Z
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	fc 01       	movw	r30, r24
 2b0:	00 82       	st	Z, r0
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	41 50       	subi	r20, 0x01	; 1
 2b6:	44 23       	and	r20, r20
 2b8:	b1 f7       	brne	.-20     	; 0x2a6 <instructionHandler+0x168>

					itoa((int)ret, buff + 7, 16);
 2ba:	8c 81       	ldd	r24, Y+4	; 0x04
 2bc:	88 2f       	mov	r24, r24
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	9e 01       	movw	r18, r28
 2c2:	29 5f       	subi	r18, 0xF9	; 249
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	29 5f       	subi	r18, 0xF9	; 249
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	b9 01       	movw	r22, r18
 2cc:	40 e1       	ldi	r20, 0x10	; 16
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	0e 94 64 05 	call	0xac8	; 0xac8 <itoa>
					uart_puts(buff);
 2d4:	ce 01       	movw	r24, r28
 2d6:	07 96       	adiw	r24, 0x07	; 7
 2d8:	0e 94 4c 03 	call	0x698	; 0x698 <uart_puts>
				}
			break;
 2dc:	45 c0       	rjmp	.+138    	; 0x368 <instructionHandler+0x22a>
			
			case 'g':
				memset(buff, 0, 16);
 2de:	ce 01       	movw	r24, r28
 2e0:	07 96       	adiw	r24, 0x07	; 7
 2e2:	20 e1       	ldi	r18, 0x10	; 16
 2e4:	fc 01       	movw	r30, r24
 2e6:	32 2f       	mov	r19, r18
 2e8:	11 92       	st	Z+, r1
 2ea:	3a 95       	dec	r19
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <instructionHandler+0x1aa>
				memcpy(buff, " 0x",3);
 2ee:	ce 01       	movw	r24, r28
 2f0:	07 96       	adiw	r24, 0x07	; 7
 2f2:	28 e6       	ldi	r18, 0x68	; 104
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	43 e0       	ldi	r20, 0x03	; 3
 2f8:	f9 01       	movw	r30, r18
 2fa:	00 80       	ld	r0, Z
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	fc 01       	movw	r30, r24
 302:	00 82       	st	Z, r0
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	41 50       	subi	r20, 0x01	; 1
 308:	44 23       	and	r20, r20
 30a:	b1 f7       	brne	.-20     	; 0x2f8 <instructionHandler+0x1ba>
				addr = (uint16_t) strtoul(&instruction[1], NULL, 16);
 30c:	87 e8       	ldi	r24, 0x87	; 135
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	40 e1       	ldi	r20, 0x10	; 16
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	0e 94 3e 04 	call	0x87c	; 0x87c <strtoul>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	9a 83       	std	Y+2, r25	; 0x02
 322:	89 83       	std	Y+1, r24	; 0x01
				itoa((int)getValAddr(addr), buff + 3, 16);
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	9a 81       	ldd	r25, Y+2	; 0x02
 328:	0e 94 02 02 	call	0x404	; 0x404 <getValAddr>
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	9e 01       	movw	r18, r28
 332:	29 5f       	subi	r18, 0xF9	; 249
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	2d 5f       	subi	r18, 0xFD	; 253
 338:	3f 4f       	sbci	r19, 0xFF	; 255
 33a:	b9 01       	movw	r22, r18
 33c:	40 e1       	ldi	r20, 0x10	; 16
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	0e 94 64 05 	call	0xac8	; 0xac8 <itoa>
				uart_puts(buff);
 344:	ce 01       	movw	r24, r28
 346:	07 96       	adiw	r24, 0x07	; 7
 348:	0e 94 4c 03 	call	0x698	; 0x698 <uart_puts>
			break;
 34c:	0e c0       	rjmp	.+28     	; 0x36a <instructionHandler+0x22c>
			
			default:
				uart_puts_P("unsupported instruction: ");
 34e:	89 e9       	ldi	r24, 0x99	; 153
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_puts_p>
				uart_puts(instruction);
 356:	86 e8       	ldi	r24, 0x86	; 134
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 4c 03 	call	0x698	; 0x698 <uart_puts>
				uart_puts_P(" -> cleared");
 35e:	83 eb       	ldi	r24, 0xB3	; 179
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_puts_p>
 366:	01 c0       	rjmp	.+2      	; 0x36a <instructionHandler+0x22c>
					memcpy(buff, " --> 0x",7);

					itoa((int)ret, buff + 7, 16);
					uart_puts(buff);
				}
			break;
 368:	00 00       	nop
				uart_puts_P("unsupported instruction: ");
				uart_puts(instruction);
				uart_puts_P(" -> cleared");
				
		}
		instrIn = 0;
 36a:	10 92 84 00 	sts	0x0084, r1
		memset(instruction, 0, INSTRUCTION_LEN);
 36e:	20 e2       	ldi	r18, 0x20	; 32
 370:	86 e8       	ldi	r24, 0x86	; 134
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	fc 01       	movw	r30, r24
 376:	32 2f       	mov	r19, r18
 378:	11 92       	st	Z+, r1
 37a:	3a 95       	dec	r19
 37c:	e9 f7       	brne	.-6      	; 0x378 <instructionHandler+0x23a>
		uart_putc('\n');
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	0e 94 22 03 	call	0x644	; 0x644 <uart_putc>
	}
	/* send received character back */
    uart_putc( (unsigned char)c );
 384:	8f 89       	ldd	r24, Y+23	; 0x17
 386:	0e 94 22 03 	call	0x644	; 0x644 <uart_putc>
	return 0;	
 38a:	80 e0       	ldi	r24, 0x00	; 0
}
 38c:	67 96       	adiw	r28, 0x17	; 23
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <setValAddr>:

//sets value at addres 
uint8_t setValAddr(uint16_t addr, uint8_t val){
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	28 97       	sbiw	r28, 0x08	; 8
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
 3b2:	9f 83       	std	Y+7, r25	; 0x07
 3b4:	8e 83       	std	Y+6, r24	; 0x06
 3b6:	68 87       	std	Y+8, r22	; 0x08
	void* pvAddr = NULL;
 3b8:	1a 82       	std	Y+2, r1	; 0x02
 3ba:	19 82       	std	Y+1, r1	; 0x01
	uint8_t* pbAddr = NULL;
 3bc:	1c 82       	std	Y+4, r1	; 0x04
 3be:	1b 82       	std	Y+3, r1	; 0x03
	
	pvAddr = (void*)addr;
 3c0:	8e 81       	ldd	r24, Y+6	; 0x06
 3c2:	9f 81       	ldd	r25, Y+7	; 0x07
 3c4:	9a 83       	std	Y+2, r25	; 0x02
 3c6:	89 83       	std	Y+1, r24	; 0x01
	pbAddr = (uint8_t*)pvAddr;
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	9a 81       	ldd	r25, Y+2	; 0x02
 3cc:	9c 83       	std	Y+4, r25	; 0x04
 3ce:	8b 83       	std	Y+3, r24	; 0x03
	*pbAddr = val;
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	9c 81       	ldd	r25, Y+4	; 0x04
 3d4:	28 85       	ldd	r18, Y+8	; 0x08
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
	uint8_t ret = getValAddr(addr);
 3da:	8e 81       	ldd	r24, Y+6	; 0x06
 3dc:	9f 81       	ldd	r25, Y+7	; 0x07
 3de:	0e 94 02 02 	call	0x404	; 0x404 <getValAddr>
 3e2:	8d 83       	std	Y+5, r24	; 0x05
	if (val != ret)
 3e4:	98 85       	ldd	r25, Y+8	; 0x08
 3e6:	8d 81       	ldd	r24, Y+5	; 0x05
 3e8:	98 17       	cp	r25, r24
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <setValAddr+0x52>
		return ret;
 3ec:	8d 81       	ldd	r24, Y+5	; 0x05
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <setValAddr+0x54>
	return 0;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
}
 3f2:	28 96       	adiw	r28, 0x08	; 8
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <getValAddr>:


// returns value at address
uint8_t getValAddr(uint16_t addr){
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	27 97       	sbiw	r28, 0x07	; 7
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	9f 83       	std	Y+7, r25	; 0x07
 41a:	8e 83       	std	Y+6, r24	; 0x06
	void* pvAddr = NULL;
 41c:	1a 82       	std	Y+2, r1	; 0x02
 41e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t* pbAddr = NULL;
 420:	1c 82       	std	Y+4, r1	; 0x04
 422:	1b 82       	std	Y+3, r1	; 0x03

	pvAddr = (void*)addr;
 424:	8e 81       	ldd	r24, Y+6	; 0x06
 426:	9f 81       	ldd	r25, Y+7	; 0x07
 428:	9a 83       	std	Y+2, r25	; 0x02
 42a:	89 83       	std	Y+1, r24	; 0x01
	pbAddr = (uint8_t*)pvAddr;
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	9c 83       	std	Y+4, r25	; 0x04
 432:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t val = *pbAddr;
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	9c 81       	ldd	r25, Y+4	; 0x04
 438:	fc 01       	movw	r30, r24
 43a:	80 81       	ld	r24, Z
 43c:	8d 83       	std	Y+5, r24	; 0x05
	return val;
 43e:	8d 81       	ldd	r24, Y+5	; 0x05
}
 440:	27 96       	adiw	r28, 0x07	; 7
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	2f 93       	push	r18
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	00 d0       	rcall	.+0      	; 0x46c <__stack+0xd>
 46c:	00 d0       	rcall	.+0      	; 0x46e <__stack+0xf>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 472:	8b e2       	ldi	r24, 0x2B	; 43
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	fc 01       	movw	r30, r24
 478:	80 81       	ld	r24, Z
 47a:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
 47c:	8c e2       	ldi	r24, 0x2C	; 44
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	fc 01       	movw	r30, r24
 482:	80 81       	ld	r24, Z
 484:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	88 71       	andi	r24, 0x18	; 24
 48a:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 48c:	80 91 e8 00 	lds	r24, 0x00E8
 490:	8f 5f       	subi	r24, 0xFF	; 255
 492:	8f 71       	andi	r24, 0x1F	; 31
 494:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
 496:	80 91 e9 00 	lds	r24, 0x00E9
 49a:	9c 81       	ldd	r25, Y+4	; 0x04
 49c:	98 17       	cp	r25, r24
 49e:	19 f4       	brne	.+6      	; 0x4a6 <__stack+0x47>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	89 83       	std	Y+1, r24	; 0x01
 4a4:	0b c0       	rjmp	.+22     	; 0x4bc <__stack+0x5d>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	80 93 e8 00 	sts	0x00E8, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	88 2f       	mov	r24, r24
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	8a 53       	subi	r24, 0x3A	; 58
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	2b 81       	ldd	r18, Y+3	; 0x03
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	80 93 ea 00 	sts	0x00EA, r24
}
 4c2:	24 96       	adiw	r28, 0x04	; 4
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	8f 93       	push	r24
 4f0:	9f 93       	push	r25
 4f2:	ef 93       	push	r30
 4f4:	ff 93       	push	r31
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	0f 92       	push	r0
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 500:	90 91 e6 00 	lds	r25, 0x00E6
 504:	80 91 e7 00 	lds	r24, 0x00E7
 508:	98 17       	cp	r25, r24
 50a:	a1 f0       	breq	.+40     	; 0x534 <__vector_12+0x54>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 50c:	80 91 e7 00 	lds	r24, 0x00E7
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	8f 71       	andi	r24, 0x1F	; 31
 514:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	80 93 e7 00 	sts	0x00E7, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 51c:	8c e2       	ldi	r24, 0x2C	; 44
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	29 81       	ldd	r18, Y+1	; 0x01
 522:	22 2f       	mov	r18, r18
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	2a 55       	subi	r18, 0x5A	; 90
 528:	3f 4f       	sbci	r19, 0xFF	; 255
 52a:	f9 01       	movw	r30, r18
 52c:	20 81       	ld	r18, Z
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
 532:	09 c0       	rjmp	.+18     	; 0x546 <__vector_12+0x66>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 534:	8a e2       	ldi	r24, 0x2A	; 42
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	2a e2       	ldi	r18, 0x2A	; 42
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	f9 01       	movw	r30, r18
 53e:	20 81       	ld	r18, Z
 540:	2f 7d       	andi	r18, 0xDF	; 223
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
    }
}
 546:	0f 90       	pop	r0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	00 d0       	rcall	.+0      	; 0x568 <uart_init+0x6>
 568:	0f 92       	push	r0
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	9b 83       	std	Y+3, r25	; 0x03
 570:	8a 83       	std	Y+2, r24	; 0x02
    UART_TxHead = 0;
 572:	10 92 e6 00 	sts	0x00E6, r1
    UART_TxTail = 0;
 576:	10 92 e7 00 	sts	0x00E7, r1
    UART_RxHead = 0;
 57a:	10 92 e8 00 	sts	0x00E8, r1
    UART_RxTail = 0;
 57e:	10 92 e9 00 	sts	0x00E9, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	9b 81       	ldd	r25, Y+3	; 0x03
 586:	99 23       	and	r25, r25
 588:	54 f4       	brge	.+20     	; 0x59e <uart_init+0x3c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 58a:	8b e2       	ldi	r24, 0x2B	; 43
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	22 e0       	ldi	r18, 0x02	; 2
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
    	 baudrate &= ~0x8000;
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	9b 81       	ldd	r25, Y+3	; 0x03
 598:	9f 77       	andi	r25, 0x7F	; 127
 59a:	9b 83       	std	Y+3, r25	; 0x03
 59c:	8a 83       	std	Y+2, r24	; 0x02
    }
    UBRRH = (unsigned char)(baudrate>>8);
 59e:	80 e4       	ldi	r24, 0x40	; 64
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	2a 81       	ldd	r18, Y+2	; 0x02
 5a4:	3b 81       	ldd	r19, Y+3	; 0x03
 5a6:	23 2f       	mov	r18, r19
 5a8:	33 27       	eor	r19, r19
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
    UBRRL = (unsigned char) baudrate;
 5ae:	89 e2       	ldi	r24, 0x29	; 41
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	2a 81       	ldd	r18, Y+2	; 0x02
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 83       	st	Z, r18
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 5b8:	8a e2       	ldi	r24, 0x2A	; 42
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	28 e9       	ldi	r18, 0x98	; 152
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 5c2:	80 e4       	ldi	r24, 0x40	; 64
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	26 e8       	ldi	r18, 0x86	; 134
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

/* Let the signal settle so sync is found by remote receiver */
for(uint8_t i = 0; i < 100; i++)
 5cc:	19 82       	std	Y+1, r1	; 0x01
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <uart_init+0x74>
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	89 83       	std	Y+1, r24	; 0x01
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	84 36       	cpi	r24, 0x64	; 100
 5da:	d0 f3       	brcs	.-12     	; 0x5d0 <uart_init+0x6e>
;
	

}/* uart_init */
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <uart_getc+0x6>
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 5f2:	90 91 e8 00 	lds	r25, 0x00E8
 5f6:	80 91 e9 00 	lds	r24, 0x00E9
 5fa:	98 17       	cp	r25, r24
 5fc:	19 f4       	brne	.+6      	; 0x604 <uart_getc+0x1c>
        return UART_NO_DATA;   /* no data available */
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	1b c0       	rjmp	.+54     	; 0x63a <uart_getc+0x52>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 604:	80 91 e9 00 	lds	r24, 0x00E9
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	8f 71       	andi	r24, 0x1F	; 31
 60c:	89 83       	std	Y+1, r24	; 0x01
    UART_RxTail = tmptail; 
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	80 93 e9 00 	sts	0x00E9, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	8a 53       	subi	r24, 0x3A	; 58
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	fc 01       	movw	r30, r24
 620:	80 81       	ld	r24, Z
 622:	8a 83       	std	Y+2, r24	; 0x02
    
    return (UART_LastRxError << 8) + data;
 624:	80 91 ea 00 	lds	r24, 0x00EA
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	38 2f       	mov	r19, r24
 62e:	22 27       	eor	r18, r18
 630:	8a 81       	ldd	r24, Y+2	; 0x02
 632:	88 2f       	mov	r24, r24
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	82 0f       	add	r24, r18
 638:	93 1f       	adc	r25, r19

}/* uart_getc */
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	00 d0       	rcall	.+0      	; 0x64a <uart_putc+0x6>
 64a:	cd b7       	in	r28, 0x3d	; 61
 64c:	de b7       	in	r29, 0x3e	; 62
 64e:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 650:	80 91 e6 00 	lds	r24, 0x00E6
 654:	8f 5f       	subi	r24, 0xFF	; 255
 656:	8f 71       	andi	r24, 0x1F	; 31
 658:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
 65a:	00 00       	nop
 65c:	80 91 e7 00 	lds	r24, 0x00E7
 660:	99 81       	ldd	r25, Y+1	; 0x01
 662:	98 17       	cp	r25, r24
 664:	d9 f3       	breq	.-10     	; 0x65c <uart_putc+0x18>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 666:	89 81       	ldd	r24, Y+1	; 0x01
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	8a 55       	subi	r24, 0x5A	; 90
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	2a 81       	ldd	r18, Y+2	; 0x02
 672:	fc 01       	movw	r30, r24
 674:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	80 93 e6 00 	sts	0x00E6, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 67c:	8a e2       	ldi	r24, 0x2A	; 42
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	2a e2       	ldi	r18, 0x2A	; 42
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	f9 01       	movw	r30, r18
 686:	20 81       	ld	r18, Z
 688:	20 62       	ori	r18, 0x20	; 32
 68a:	fc 01       	movw	r30, r24
 68c:	20 83       	st	Z, r18

}/* uart_putc */
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	08 95       	ret

00000698 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	00 d0       	rcall	.+0      	; 0x69e <uart_puts+0x6>
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	9a 83       	std	Y+2, r25	; 0x02
 6a4:	89 83       	std	Y+1, r24	; 0x01
    while (*s) 
 6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <uart_puts+0x28>
      uart_putc(*s++);
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	9a 81       	ldd	r25, Y+2	; 0x02
 6ac:	fc 01       	movw	r30, r24
 6ae:	20 81       	ld	r18, Z
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	9a 81       	ldd	r25, Y+2	; 0x02
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	9a 83       	std	Y+2, r25	; 0x02
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	82 2f       	mov	r24, r18
 6bc:	0e 94 22 03 	call	0x644	; 0x644 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
 6c2:	9a 81       	ldd	r25, Y+2	; 0x02
 6c4:	fc 01       	movw	r30, r24
 6c6:	80 81       	ld	r24, Z
 6c8:	88 23       	and	r24, r24
 6ca:	71 f7       	brne	.-36     	; 0x6a8 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	08 95       	ret

000006d6 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	00 d0       	rcall	.+0      	; 0x6de <uart_puts_p+0x8>
 6de:	00 d0       	rcall	.+0      	; 0x6e0 <uart_puts_p+0xa>
 6e0:	0f 92       	push	r0
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
 6e6:	9d 83       	std	Y+5, r25	; 0x05
 6e8:	8c 83       	std	Y+4, r24	; 0x04
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <uart_puts_p+0x1c>
      uart_putc(c);
 6ec:	81 2f       	mov	r24, r17
 6ee:	0e 94 22 03 	call	0x644	; 0x644 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 6f2:	8c 81       	ldd	r24, Y+4	; 0x04
 6f4:	9d 81       	ldd	r25, Y+5	; 0x05
 6f6:	9a 83       	std	Y+2, r25	; 0x02
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	8c 81       	ldd	r24, Y+4	; 0x04
 6fc:	9d 81       	ldd	r25, Y+5	; 0x05
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	9d 83       	std	Y+5, r25	; 0x05
 702:	8c 83       	std	Y+4, r24	; 0x04
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	9a 81       	ldd	r25, Y+2	; 0x02
 708:	fc 01       	movw	r30, r24
 70a:	14 91       	lpm	r17, Z
 70c:	1b 83       	std	Y+3, r17	; 0x03
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	18 2f       	mov	r17, r24
 712:	11 23       	and	r17, r17
 714:	59 f7       	brne	.-42     	; 0x6ec <uart_puts_p+0x16>
      uart_putc(c);

}/* uart_puts_p */
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	08 95       	ret

00000728 <uart_available>:
Purpose:  Determine the number of bytes waiting in the receive buffer
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 730:	80 91 e8 00 	lds	r24, 0x00E8
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	9c 01       	movw	r18, r24
 73a:	21 5e       	subi	r18, 0xE1	; 225
 73c:	3f 4f       	sbci	r19, 0xFF	; 255
 73e:	80 91 e9 00 	lds	r24, 0x00E9
 742:	88 2f       	mov	r24, r24
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	a9 01       	movw	r20, r18
 748:	48 1b       	sub	r20, r24
 74a:	59 0b       	sbc	r21, r25
 74c:	ca 01       	movw	r24, r20
 74e:	2f e1       	ldi	r18, 0x1F	; 31
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	b9 01       	movw	r22, r18
 754:	0e 94 17 04 	call	0x82e	; 0x82e <__divmodhi4>
}/* uart_available */
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <uart_flush>:
Purpose:  Flush bytes waiting the receive buffer.  Acutally ignores them.
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
        UART_RxHead = UART_RxTail;
 766:	80 91 e9 00 	lds	r24, 0x00E9
 76a:	80 93 e8 00 	sts	0x00E8, r24
}/* uart_flush */
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <main>:

*/


int main(void)
{
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	64 97       	sbiw	r28, 0x14	; 20
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
	
    unsigned int c;
    char buffer[7];
    int  num=134;
 788:	86 e8       	ldi	r24, 0x86	; 134
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	9a 83       	std	Y+2, r25	; 0x02
 78e:	89 83       	std	Y+1, r24	; 0x01
	char instruction[8] = {0};
 790:	28 e0       	ldi	r18, 0x08	; 8
 792:	ce 01       	movw	r24, r28
 794:	0d 96       	adiw	r24, 0x0d	; 13
 796:	fc 01       	movw	r30, r24
 798:	32 2f       	mov	r19, r18
 79a:	11 92       	st	Z+, r1
 79c:	3a 95       	dec	r19
 79e:	e9 f7       	brne	.-6      	; 0x79a <main+0x26>
	uint8_t cnt = 0;	
 7a0:	1b 82       	std	Y+3, r1	; 0x03
			
	DDRB = 0xff;
 7a2:	87 e3       	ldi	r24, 0x37	; 55
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	2f ef       	ldi	r18, 0xFF	; 255
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 83       	st	Z, r18
	PORTB = 0xfe;
 7ac:	88 e3       	ldi	r24, 0x38	; 56
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	2e ef       	ldi	r18, 0xFE	; 254
 7b2:	fc 01       	movw	r30, r24
 7b4:	20 83       	st	Z, r18
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 7b6:	83 e3       	ldi	r24, 0x33	; 51
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 b1 02 	call	0x562	; 0x562 <uart_init>
     
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 7be:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("Atmega2560 initialized\n");
 7c0:	8c e6       	ldi	r24, 0x6C	; 108
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 4c 03 	call	0x698	; 0x698 <uart_puts>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 7c8:	8d e0       	ldi	r24, 0x0D	; 13
 7ca:	0e 94 22 03 	call	0x644	; 0x644 <uart_putc>
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <main+0x5e>
			
			
			
			
        }
    }
 7d0:	00 00       	nop
			cnt = 0;
			PORTB = PORTB ^ 1;
		}        
		cnt++;*/
		
		c = uart_getc();
 7d2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uart_getc>
 7d6:	9d 83       	std	Y+5, r25	; 0x05
 7d8:	8c 83       	std	Y+4, r24	; 0x04
        if ( c & UART_NO_DATA )
 7da:	8c 81       	ldd	r24, Y+4	; 0x04
 7dc:	9d 81       	ldd	r25, Y+5	; 0x05
 7de:	80 70       	andi	r24, 0x00	; 0
 7e0:	91 70       	andi	r25, 0x01	; 1
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	a9 f7       	brne	.-22     	; 0x7d0 <main+0x5c>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 7e6:	8c 81       	ldd	r24, Y+4	; 0x04
 7e8:	9d 81       	ldd	r25, Y+5	; 0x05
 7ea:	80 70       	andi	r24, 0x00	; 0
 7ec:	98 70       	andi	r25, 0x08	; 8
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	21 f0       	breq	.+8      	; 0x7fa <main+0x86>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 7f2:	8f eb       	ldi	r24, 0xBF	; 191
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 7fa:	8c 81       	ldd	r24, Y+4	; 0x04
 7fc:	9d 81       	ldd	r25, Y+5	; 0x05
 7fe:	80 70       	andi	r24, 0x00	; 0
 800:	94 70       	andi	r25, 0x04	; 4
 802:	00 97       	sbiw	r24, 0x00	; 0
 804:	21 f0       	breq	.+8      	; 0x80e <main+0x9a>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 806:	82 ed       	ldi	r24, 0xD2	; 210
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 80e:	8c 81       	ldd	r24, Y+4	; 0x04
 810:	9d 81       	ldd	r25, Y+5	; 0x05
 812:	80 70       	andi	r24, 0x00	; 0
 814:	92 70       	andi	r25, 0x02	; 2
 816:	00 97       	sbiw	r24, 0x00	; 0
 818:	21 f0       	breq	.+8      	; 0x822 <main+0xae>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 81a:	87 ee       	ldi	r24, 0xE7	; 231
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_puts_p>
			/* 
			 * Instruction handler sums up characters for an instruction  
			 * frame and calls the appropriate function if the frame was  
			 * received successfully, or returns error code
			 */
			instructionHandler( (unsigned char)c );
 822:	8c 81       	ldd	r24, Y+4	; 0x04
 824:	88 2f       	mov	r24, r24
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 9f 00 	call	0x13e	; 0x13e <instructionHandler>
			
			
			
			
        }
    }
 82c:	d1 cf       	rjmp	.-94     	; 0x7d0 <main+0x5c>

0000082e <__divmodhi4>:
 82e:	97 fb       	bst	r25, 7
 830:	09 2e       	mov	r0, r25
 832:	07 26       	eor	r0, r23
 834:	0a d0       	rcall	.+20     	; 0x84a <__divmodhi4_neg1>
 836:	77 fd       	sbrc	r23, 7
 838:	04 d0       	rcall	.+8      	; 0x842 <__divmodhi4_neg2>
 83a:	0c d0       	rcall	.+24     	; 0x854 <__udivmodhi4>
 83c:	06 d0       	rcall	.+12     	; 0x84a <__divmodhi4_neg1>
 83e:	00 20       	and	r0, r0
 840:	1a f4       	brpl	.+6      	; 0x848 <__divmodhi4_exit>

00000842 <__divmodhi4_neg2>:
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255

00000848 <__divmodhi4_exit>:
 848:	08 95       	ret

0000084a <__divmodhi4_neg1>:
 84a:	f6 f7       	brtc	.-4      	; 0x848 <__divmodhi4_exit>
 84c:	90 95       	com	r25
 84e:	81 95       	neg	r24
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	08 95       	ret

00000854 <__udivmodhi4>:
 854:	aa 1b       	sub	r26, r26
 856:	bb 1b       	sub	r27, r27
 858:	51 e1       	ldi	r21, 0x11	; 17
 85a:	07 c0       	rjmp	.+14     	; 0x86a <__udivmodhi4_ep>

0000085c <__udivmodhi4_loop>:
 85c:	aa 1f       	adc	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	a6 17       	cp	r26, r22
 862:	b7 07       	cpc	r27, r23
 864:	10 f0       	brcs	.+4      	; 0x86a <__udivmodhi4_ep>
 866:	a6 1b       	sub	r26, r22
 868:	b7 0b       	sbc	r27, r23

0000086a <__udivmodhi4_ep>:
 86a:	88 1f       	adc	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	5a 95       	dec	r21
 870:	a9 f7       	brne	.-22     	; 0x85c <__udivmodhi4_loop>
 872:	80 95       	com	r24
 874:	90 95       	com	r25
 876:	bc 01       	movw	r22, r24
 878:	cd 01       	movw	r24, r26
 87a:	08 95       	ret

0000087c <strtoul>:
 87c:	a4 e0       	ldi	r26, 0x04	; 4
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	e4 e4       	ldi	r30, 0x44	; 68
 882:	f4 e0       	ldi	r31, 0x04	; 4
 884:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__prologue_saves__+0x2>
 888:	2b 01       	movw	r4, r22
 88a:	7a 01       	movw	r14, r20
 88c:	61 15       	cp	r22, r1
 88e:	71 05       	cpc	r23, r1
 890:	29 f0       	breq	.+10     	; 0x89c <strtoul+0x20>
 892:	db 01       	movw	r26, r22
 894:	8c 93       	st	X, r24
 896:	11 96       	adiw	r26, 0x01	; 1
 898:	9c 93       	st	X, r25
 89a:	11 97       	sbiw	r26, 0x01	; 1
 89c:	e1 14       	cp	r14, r1
 89e:	f1 04       	cpc	r15, r1
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <strtoul+0x34>
 8a2:	97 01       	movw	r18, r14
 8a4:	22 50       	subi	r18, 0x02	; 2
 8a6:	30 40       	sbci	r19, 0x00	; 0
 8a8:	23 32       	cpi	r18, 0x23	; 35
 8aa:	31 05       	cpc	r19, r1
 8ac:	08 f0       	brcs	.+2      	; 0x8b0 <strtoul+0x34>
 8ae:	fb c0       	rjmp	.+502    	; 0xaa6 <strtoul+0x22a>
 8b0:	6c 01       	movw	r12, r24
 8b2:	86 01       	movw	r16, r12
 8b4:	08 94       	sec
 8b6:	c1 1c       	adc	r12, r1
 8b8:	d1 1c       	adc	r13, r1
 8ba:	f8 01       	movw	r30, r16
 8bc:	30 80       	ld	r3, Z
 8be:	36 01       	movw	r6, r12
 8c0:	83 2d       	mov	r24, r3
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 5c 05 	call	0xab8	; 0xab8 <isspace>
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	99 f7       	brne	.-26     	; 0x8b2 <strtoul+0x36>
 8cc:	fd e2       	ldi	r31, 0x2D	; 45
 8ce:	3f 16       	cp	r3, r31
 8d0:	61 f4       	brne	.+24     	; 0x8ea <strtoul+0x6e>
 8d2:	d8 01       	movw	r26, r16
 8d4:	11 96       	adiw	r26, 0x01	; 1
 8d6:	3c 90       	ld	r3, X
 8d8:	11 97       	sbiw	r26, 0x01	; 1
 8da:	92 e0       	ldi	r25, 0x02	; 2
 8dc:	69 2e       	mov	r6, r25
 8de:	71 2c       	mov	r7, r1
 8e0:	60 0e       	add	r6, r16
 8e2:	71 1e       	adc	r7, r17
 8e4:	cc 24       	eor	r12, r12
 8e6:	c3 94       	inc	r12
 8e8:	0b c0       	rjmp	.+22     	; 0x900 <strtoul+0x84>
 8ea:	bb e2       	ldi	r27, 0x2B	; 43
 8ec:	3b 16       	cp	r3, r27
 8ee:	39 f4       	brne	.+14     	; 0x8fe <strtoul+0x82>
 8f0:	f8 01       	movw	r30, r16
 8f2:	31 80       	ldd	r3, Z+1	; 0x01
 8f4:	82 e0       	ldi	r24, 0x02	; 2
 8f6:	68 2e       	mov	r6, r24
 8f8:	71 2c       	mov	r7, r1
 8fa:	60 0e       	add	r6, r16
 8fc:	71 1e       	adc	r7, r17
 8fe:	cc 24       	eor	r12, r12
 900:	e1 14       	cp	r14, r1
 902:	f1 04       	cpc	r15, r1
 904:	21 f0       	breq	.+8      	; 0x90e <strtoul+0x92>
 906:	f0 e1       	ldi	r31, 0x10	; 16
 908:	ef 16       	cp	r14, r31
 90a:	f1 04       	cpc	r15, r1
 90c:	f9 f4       	brne	.+62     	; 0x94c <strtoul+0xd0>
 90e:	80 e3       	ldi	r24, 0x30	; 48
 910:	38 16       	cp	r3, r24
 912:	91 f4       	brne	.+36     	; 0x938 <strtoul+0xbc>
 914:	d3 01       	movw	r26, r6
 916:	8c 91       	ld	r24, X
 918:	88 37       	cpi	r24, 0x78	; 120
 91a:	11 f0       	breq	.+4      	; 0x920 <strtoul+0xa4>
 91c:	88 35       	cpi	r24, 0x58	; 88
 91e:	61 f4       	brne	.+24     	; 0x938 <strtoul+0xbc>
 920:	f3 01       	movw	r30, r6
 922:	31 80       	ldd	r3, Z+1	; 0x01
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	68 0e       	add	r6, r24
 92a:	79 1e       	adc	r7, r25
 92c:	92 e0       	ldi	r25, 0x02	; 2
 92e:	c9 2a       	or	r12, r25
 930:	b0 e1       	ldi	r27, 0x10	; 16
 932:	eb 2e       	mov	r14, r27
 934:	f1 2c       	mov	r15, r1
 936:	0a c0       	rjmp	.+20     	; 0x94c <strtoul+0xd0>
 938:	e1 14       	cp	r14, r1
 93a:	f1 04       	cpc	r15, r1
 93c:	39 f4       	brne	.+14     	; 0x94c <strtoul+0xd0>
 93e:	a0 e3       	ldi	r26, 0x30	; 48
 940:	3a 16       	cp	r3, r26
 942:	d1 f0       	breq	.+52     	; 0x978 <strtoul+0xfc>
 944:	aa e0       	ldi	r26, 0x0A	; 10
 946:	ea 2e       	mov	r14, r26
 948:	f1 2c       	mov	r15, r1
 94a:	30 c0       	rjmp	.+96     	; 0x9ac <strtoul+0x130>
 94c:	ba e0       	ldi	r27, 0x0A	; 10
 94e:	eb 16       	cp	r14, r27
 950:	f1 04       	cpc	r15, r1
 952:	61 f1       	breq	.+88     	; 0x9ac <strtoul+0x130>
 954:	e0 e1       	ldi	r30, 0x10	; 16
 956:	ee 16       	cp	r14, r30
 958:	f1 04       	cpc	r15, r1
 95a:	29 f0       	breq	.+10     	; 0x966 <strtoul+0xea>
 95c:	f8 e0       	ldi	r31, 0x08	; 8
 95e:	ef 16       	cp	r14, r31
 960:	f1 04       	cpc	r15, r1
 962:	b1 f4       	brne	.+44     	; 0x990 <strtoul+0x114>
 964:	09 c0       	rjmp	.+18     	; 0x978 <strtoul+0xfc>
 966:	ff ef       	ldi	r31, 0xFF	; 255
 968:	8f 2e       	mov	r8, r31
 96a:	ff ef       	ldi	r31, 0xFF	; 255
 96c:	9f 2e       	mov	r9, r31
 96e:	ff ef       	ldi	r31, 0xFF	; 255
 970:	af 2e       	mov	r10, r31
 972:	ff e0       	ldi	r31, 0x0F	; 15
 974:	bf 2e       	mov	r11, r31
 976:	22 c0       	rjmp	.+68     	; 0x9bc <strtoul+0x140>
 978:	78 e0       	ldi	r23, 0x08	; 8
 97a:	e7 2e       	mov	r14, r23
 97c:	f1 2c       	mov	r15, r1
 97e:	ef ef       	ldi	r30, 0xFF	; 255
 980:	8e 2e       	mov	r8, r30
 982:	ef ef       	ldi	r30, 0xFF	; 255
 984:	9e 2e       	mov	r9, r30
 986:	ef ef       	ldi	r30, 0xFF	; 255
 988:	ae 2e       	mov	r10, r30
 98a:	ef e1       	ldi	r30, 0x1F	; 31
 98c:	be 2e       	mov	r11, r30
 98e:	16 c0       	rjmp	.+44     	; 0x9bc <strtoul+0x140>
 990:	97 01       	movw	r18, r14
 992:	44 27       	eor	r20, r20
 994:	37 fd       	sbrc	r19, 7
 996:	40 95       	com	r20
 998:	54 2f       	mov	r21, r20
 99a:	6f ef       	ldi	r22, 0xFF	; 255
 99c:	7f ef       	ldi	r23, 0xFF	; 255
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	9f ef       	ldi	r25, 0xFF	; 255
 9a2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__udivmodsi4>
 9a6:	49 01       	movw	r8, r18
 9a8:	5a 01       	movw	r10, r20
 9aa:	08 c0       	rjmp	.+16     	; 0x9bc <strtoul+0x140>
 9ac:	69 e9       	ldi	r22, 0x99	; 153
 9ae:	86 2e       	mov	r8, r22
 9b0:	69 e9       	ldi	r22, 0x99	; 153
 9b2:	96 2e       	mov	r9, r22
 9b4:	69 e9       	ldi	r22, 0x99	; 153
 9b6:	a6 2e       	mov	r10, r22
 9b8:	69 e1       	ldi	r22, 0x19	; 25
 9ba:	b6 2e       	mov	r11, r22
 9bc:	40 e0       	ldi	r20, 0x00	; 0
 9be:	00 e0       	ldi	r16, 0x00	; 0
 9c0:	10 e0       	ldi	r17, 0x00	; 0
 9c2:	98 01       	movw	r18, r16
 9c4:	c7 01       	movw	r24, r14
 9c6:	aa 27       	eor	r26, r26
 9c8:	97 fd       	sbrc	r25, 7
 9ca:	a0 95       	com	r26
 9cc:	ba 2f       	mov	r27, r26
 9ce:	89 83       	std	Y+1, r24	; 0x01
 9d0:	9a 83       	std	Y+2, r25	; 0x02
 9d2:	ab 83       	std	Y+3, r26	; 0x03
 9d4:	bc 83       	std	Y+4, r27	; 0x04
 9d6:	50 ed       	ldi	r21, 0xD0	; 208
 9d8:	d5 2e       	mov	r13, r21
 9da:	d3 0c       	add	r13, r3
 9dc:	99 e0       	ldi	r25, 0x09	; 9
 9de:	9d 15       	cp	r25, r13
 9e0:	70 f4       	brcc	.+28     	; 0x9fe <strtoul+0x182>
 9e2:	83 2d       	mov	r24, r3
 9e4:	81 54       	subi	r24, 0x41	; 65
 9e6:	8a 31       	cpi	r24, 0x1A	; 26
 9e8:	18 f4       	brcc	.+6      	; 0x9f0 <strtoul+0x174>
 9ea:	99 ec       	ldi	r25, 0xC9	; 201
 9ec:	d9 2e       	mov	r13, r25
 9ee:	06 c0       	rjmp	.+12     	; 0x9fc <strtoul+0x180>
 9f0:	83 2d       	mov	r24, r3
 9f2:	81 56       	subi	r24, 0x61	; 97
 9f4:	8a 31       	cpi	r24, 0x1A	; 26
 9f6:	68 f5       	brcc	.+90     	; 0xa52 <strtoul+0x1d6>
 9f8:	89 ea       	ldi	r24, 0xA9	; 169
 9fa:	d8 2e       	mov	r13, r24
 9fc:	d3 0c       	add	r13, r3
 9fe:	8d 2d       	mov	r24, r13
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	8e 15       	cp	r24, r14
 a04:	9f 05       	cpc	r25, r15
 a06:	2c f5       	brge	.+74     	; 0xa52 <strtoul+0x1d6>
 a08:	4f 3f       	cpi	r20, 0xFF	; 255
 a0a:	f9 f0       	breq	.+62     	; 0xa4a <strtoul+0x1ce>
 a0c:	80 16       	cp	r8, r16
 a0e:	91 06       	cpc	r9, r17
 a10:	a2 06       	cpc	r10, r18
 a12:	b3 06       	cpc	r11, r19
 a14:	b8 f0       	brcs	.+46     	; 0xa44 <strtoul+0x1c8>
 a16:	c9 01       	movw	r24, r18
 a18:	b8 01       	movw	r22, r16
 a1a:	29 81       	ldd	r18, Y+1	; 0x01
 a1c:	3a 81       	ldd	r19, Y+2	; 0x02
 a1e:	4b 81       	ldd	r20, Y+3	; 0x03
 a20:	5c 81       	ldd	r21, Y+4	; 0x04
 a22:	0e 94 98 05 	call	0xb30	; 0xb30 <__mulsi3>
 a26:	8b 01       	movw	r16, r22
 a28:	9c 01       	movw	r18, r24
 a2a:	8d 2d       	mov	r24, r13
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	a0 e0       	ldi	r26, 0x00	; 0
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	08 0f       	add	r16, r24
 a34:	19 1f       	adc	r17, r25
 a36:	2a 1f       	adc	r18, r26
 a38:	3b 1f       	adc	r19, r27
 a3a:	08 17       	cp	r16, r24
 a3c:	19 07       	cpc	r17, r25
 a3e:	2a 07       	cpc	r18, r26
 a40:	3b 07       	cpc	r19, r27
 a42:	10 f4       	brcc	.+4      	; 0xa48 <strtoul+0x1cc>
 a44:	4f ef       	ldi	r20, 0xFF	; 255
 a46:	01 c0       	rjmp	.+2      	; 0xa4a <strtoul+0x1ce>
 a48:	41 e0       	ldi	r20, 0x01	; 1
 a4a:	d3 01       	movw	r26, r6
 a4c:	3d 90       	ld	r3, X+
 a4e:	3d 01       	movw	r6, r26
 a50:	c2 cf       	rjmp	.-124    	; 0x9d6 <strtoul+0x15a>
 a52:	41 14       	cp	r4, r1
 a54:	51 04       	cpc	r5, r1
 a56:	89 f0       	breq	.+34     	; 0xa7a <strtoul+0x1fe>
 a58:	44 23       	and	r20, r20
 a5a:	39 f0       	breq	.+14     	; 0xa6a <strtoul+0x1ee>
 a5c:	08 94       	sec
 a5e:	61 08       	sbc	r6, r1
 a60:	71 08       	sbc	r7, r1
 a62:	f2 01       	movw	r30, r4
 a64:	71 82       	std	Z+1, r7	; 0x01
 a66:	60 82       	st	Z, r6
 a68:	08 c0       	rjmp	.+16     	; 0xa7a <strtoul+0x1fe>
 a6a:	c1 fe       	sbrs	r12, 1
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <strtoul+0x1fe>
 a6e:	c3 01       	movw	r24, r6
 a70:	02 97       	sbiw	r24, 0x02	; 2
 a72:	d2 01       	movw	r26, r4
 a74:	11 96       	adiw	r26, 0x01	; 1
 a76:	9c 93       	st	X, r25
 a78:	8e 93       	st	-X, r24
 a7a:	c0 fe       	sbrs	r12, 0
 a7c:	07 c0       	rjmp	.+14     	; 0xa8c <strtoul+0x210>
 a7e:	30 95       	com	r19
 a80:	20 95       	com	r18
 a82:	10 95       	com	r17
 a84:	01 95       	neg	r16
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	2f 4f       	sbci	r18, 0xFF	; 255
 a8a:	3f 4f       	sbci	r19, 0xFF	; 255
 a8c:	47 ff       	sbrs	r20, 7
 a8e:	0e c0       	rjmp	.+28     	; 0xaac <strtoul+0x230>
 a90:	82 e2       	ldi	r24, 0x22	; 34
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	90 93 ec 00 	sts	0x00EC, r25
 a98:	80 93 eb 00 	sts	0x00EB, r24
 a9c:	0f ef       	ldi	r16, 0xFF	; 255
 a9e:	1f ef       	ldi	r17, 0xFF	; 255
 aa0:	2f ef       	ldi	r18, 0xFF	; 255
 aa2:	3f ef       	ldi	r19, 0xFF	; 255
 aa4:	03 c0       	rjmp	.+6      	; 0xaac <strtoul+0x230>
 aa6:	00 e0       	ldi	r16, 0x00	; 0
 aa8:	10 e0       	ldi	r17, 0x00	; 0
 aaa:	98 01       	movw	r18, r16
 aac:	b8 01       	movw	r22, r16
 aae:	c9 01       	movw	r24, r18
 ab0:	24 96       	adiw	r28, 0x04	; 4
 ab2:	e1 e1       	ldi	r30, 0x11	; 17
 ab4:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__epilogue_restores__+0x2>

00000ab8 <isspace>:
 ab8:	91 11       	cpse	r25, r1
 aba:	27 c0       	rjmp	.+78     	; 0xb0a <__ctype_isfalse>
 abc:	80 32       	cpi	r24, 0x20	; 32
 abe:	19 f0       	breq	.+6      	; 0xac6 <isspace+0xe>
 ac0:	89 50       	subi	r24, 0x09	; 9
 ac2:	85 50       	subi	r24, 0x05	; 5
 ac4:	d0 f7       	brcc	.-12     	; 0xaba <isspace+0x2>
 ac6:	08 95       	ret

00000ac8 <itoa>:
 ac8:	fb 01       	movw	r30, r22
 aca:	9f 01       	movw	r18, r30
 acc:	e8 94       	clt
 ace:	42 30       	cpi	r20, 0x02	; 2
 ad0:	c4 f0       	brlt	.+48     	; 0xb02 <itoa+0x3a>
 ad2:	45 32       	cpi	r20, 0x25	; 37
 ad4:	b4 f4       	brge	.+44     	; 0xb02 <itoa+0x3a>
 ad6:	4a 30       	cpi	r20, 0x0A	; 10
 ad8:	29 f4       	brne	.+10     	; 0xae4 <itoa+0x1c>
 ada:	97 fb       	bst	r25, 7
 adc:	1e f4       	brtc	.+6      	; 0xae4 <itoa+0x1c>
 ade:	90 95       	com	r25
 ae0:	81 95       	neg	r24
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	64 2f       	mov	r22, r20
 ae6:	77 27       	eor	r23, r23
 ae8:	0e 94 2a 04 	call	0x854	; 0x854 <__udivmodhi4>
 aec:	80 5d       	subi	r24, 0xD0	; 208
 aee:	8a 33       	cpi	r24, 0x3A	; 58
 af0:	0c f0       	brlt	.+2      	; 0xaf4 <itoa+0x2c>
 af2:	89 5d       	subi	r24, 0xD9	; 217
 af4:	81 93       	st	Z+, r24
 af6:	cb 01       	movw	r24, r22
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	a1 f7       	brne	.-24     	; 0xae4 <itoa+0x1c>
 afc:	16 f4       	brtc	.+4      	; 0xb02 <itoa+0x3a>
 afe:	5d e2       	ldi	r21, 0x2D	; 45
 b00:	51 93       	st	Z+, r21
 b02:	10 82       	st	Z, r1
 b04:	c9 01       	movw	r24, r18
 b06:	0c 94 88 05 	jmp	0xb10	; 0xb10 <strrev>

00000b0a <__ctype_isfalse>:
 b0a:	99 27       	eor	r25, r25
 b0c:	88 27       	eor	r24, r24

00000b0e <__ctype_istrue>:
 b0e:	08 95       	ret

00000b10 <strrev>:
 b10:	dc 01       	movw	r26, r24
 b12:	fc 01       	movw	r30, r24
 b14:	67 2f       	mov	r22, r23
 b16:	71 91       	ld	r23, Z+
 b18:	77 23       	and	r23, r23
 b1a:	e1 f7       	brne	.-8      	; 0xb14 <strrev+0x4>
 b1c:	32 97       	sbiw	r30, 0x02	; 2
 b1e:	04 c0       	rjmp	.+8      	; 0xb28 <strrev+0x18>
 b20:	7c 91       	ld	r23, X
 b22:	6d 93       	st	X+, r22
 b24:	70 83       	st	Z, r23
 b26:	62 91       	ld	r22, -Z
 b28:	ae 17       	cp	r26, r30
 b2a:	bf 07       	cpc	r27, r31
 b2c:	c8 f3       	brcs	.-14     	; 0xb20 <strrev+0x10>
 b2e:	08 95       	ret

00000b30 <__mulsi3>:
 b30:	62 9f       	mul	r22, r18
 b32:	d0 01       	movw	r26, r0
 b34:	73 9f       	mul	r23, r19
 b36:	f0 01       	movw	r30, r0
 b38:	82 9f       	mul	r24, r18
 b3a:	e0 0d       	add	r30, r0
 b3c:	f1 1d       	adc	r31, r1
 b3e:	64 9f       	mul	r22, r20
 b40:	e0 0d       	add	r30, r0
 b42:	f1 1d       	adc	r31, r1
 b44:	92 9f       	mul	r25, r18
 b46:	f0 0d       	add	r31, r0
 b48:	83 9f       	mul	r24, r19
 b4a:	f0 0d       	add	r31, r0
 b4c:	74 9f       	mul	r23, r20
 b4e:	f0 0d       	add	r31, r0
 b50:	65 9f       	mul	r22, r21
 b52:	f0 0d       	add	r31, r0
 b54:	99 27       	eor	r25, r25
 b56:	72 9f       	mul	r23, r18
 b58:	b0 0d       	add	r27, r0
 b5a:	e1 1d       	adc	r30, r1
 b5c:	f9 1f       	adc	r31, r25
 b5e:	63 9f       	mul	r22, r19
 b60:	b0 0d       	add	r27, r0
 b62:	e1 1d       	adc	r30, r1
 b64:	f9 1f       	adc	r31, r25
 b66:	bd 01       	movw	r22, r26
 b68:	cf 01       	movw	r24, r30
 b6a:	11 24       	eor	r1, r1
 b6c:	08 95       	ret

00000b6e <__udivmodsi4>:
 b6e:	a1 e2       	ldi	r26, 0x21	; 33
 b70:	1a 2e       	mov	r1, r26
 b72:	aa 1b       	sub	r26, r26
 b74:	bb 1b       	sub	r27, r27
 b76:	fd 01       	movw	r30, r26
 b78:	0d c0       	rjmp	.+26     	; 0xb94 <__udivmodsi4_ep>

00000b7a <__udivmodsi4_loop>:
 b7a:	aa 1f       	adc	r26, r26
 b7c:	bb 1f       	adc	r27, r27
 b7e:	ee 1f       	adc	r30, r30
 b80:	ff 1f       	adc	r31, r31
 b82:	a2 17       	cp	r26, r18
 b84:	b3 07       	cpc	r27, r19
 b86:	e4 07       	cpc	r30, r20
 b88:	f5 07       	cpc	r31, r21
 b8a:	20 f0       	brcs	.+8      	; 0xb94 <__udivmodsi4_ep>
 b8c:	a2 1b       	sub	r26, r18
 b8e:	b3 0b       	sbc	r27, r19
 b90:	e4 0b       	sbc	r30, r20
 b92:	f5 0b       	sbc	r31, r21

00000b94 <__udivmodsi4_ep>:
 b94:	66 1f       	adc	r22, r22
 b96:	77 1f       	adc	r23, r23
 b98:	88 1f       	adc	r24, r24
 b9a:	99 1f       	adc	r25, r25
 b9c:	1a 94       	dec	r1
 b9e:	69 f7       	brne	.-38     	; 0xb7a <__udivmodsi4_loop>
 ba0:	60 95       	com	r22
 ba2:	70 95       	com	r23
 ba4:	80 95       	com	r24
 ba6:	90 95       	com	r25
 ba8:	9b 01       	movw	r18, r22
 baa:	ac 01       	movw	r20, r24
 bac:	bd 01       	movw	r22, r26
 bae:	cf 01       	movw	r24, r30
 bb0:	08 95       	ret

00000bb2 <__prologue_saves__>:
 bb2:	2f 92       	push	r2
 bb4:	3f 92       	push	r3
 bb6:	4f 92       	push	r4
 bb8:	5f 92       	push	r5
 bba:	6f 92       	push	r6
 bbc:	7f 92       	push	r7
 bbe:	8f 92       	push	r8
 bc0:	9f 92       	push	r9
 bc2:	af 92       	push	r10
 bc4:	bf 92       	push	r11
 bc6:	cf 92       	push	r12
 bc8:	df 92       	push	r13
 bca:	ef 92       	push	r14
 bcc:	ff 92       	push	r15
 bce:	0f 93       	push	r16
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	cd b7       	in	r28, 0x3d	; 61
 bd8:	de b7       	in	r29, 0x3e	; 62
 bda:	ca 1b       	sub	r28, r26
 bdc:	db 0b       	sbc	r29, r27
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	de bf       	out	0x3e, r29	; 62
 be4:	0f be       	out	0x3f, r0	; 63
 be6:	cd bf       	out	0x3d, r28	; 61
 be8:	09 94       	ijmp

00000bea <__epilogue_restores__>:
 bea:	2a 88       	ldd	r2, Y+18	; 0x12
 bec:	39 88       	ldd	r3, Y+17	; 0x11
 bee:	48 88       	ldd	r4, Y+16	; 0x10
 bf0:	5f 84       	ldd	r5, Y+15	; 0x0f
 bf2:	6e 84       	ldd	r6, Y+14	; 0x0e
 bf4:	7d 84       	ldd	r7, Y+13	; 0x0d
 bf6:	8c 84       	ldd	r8, Y+12	; 0x0c
 bf8:	9b 84       	ldd	r9, Y+11	; 0x0b
 bfa:	aa 84       	ldd	r10, Y+10	; 0x0a
 bfc:	b9 84       	ldd	r11, Y+9	; 0x09
 bfe:	c8 84       	ldd	r12, Y+8	; 0x08
 c00:	df 80       	ldd	r13, Y+7	; 0x07
 c02:	ee 80       	ldd	r14, Y+6	; 0x06
 c04:	fd 80       	ldd	r15, Y+5	; 0x05
 c06:	0c 81       	ldd	r16, Y+4	; 0x04
 c08:	1b 81       	ldd	r17, Y+3	; 0x03
 c0a:	aa 81       	ldd	r26, Y+2	; 0x02
 c0c:	b9 81       	ldd	r27, Y+1	; 0x01
 c0e:	ce 0f       	add	r28, r30
 c10:	d1 1d       	adc	r29, r1
 c12:	0f b6       	in	r0, 0x3f	; 63
 c14:	f8 94       	cli
 c16:	de bf       	out	0x3e, r29	; 62
 c18:	0f be       	out	0x3f, r0	; 63
 c1a:	cd bf       	out	0x3d, r28	; 61
 c1c:	ed 01       	movw	r28, r26
 c1e:	08 95       	ret

00000c20 <_exit>:
 c20:	f8 94       	cli

00000c22 <__stop_program>:
 c22:	ff cf       	rjmp	.-2      	; 0xc22 <__stop_program>
